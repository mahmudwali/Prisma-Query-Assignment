// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model users {
  id                BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  firstName         String             @db.VarChar(50)
  middleName        String             @db.VarChar(50)
  lastName          String             @db.VarChar(50)
  mobile            String             @db.VarChar(10)
  email             String             @unique(map: "users_email_unique") @db.VarChar(50)
  passwordHash      String             @db.VarChar(10)
  otp               String             @db.VarChar(10)
  registeredAt        DateTime           @default(now()) @db.Timestamp(0)
  lastLogin        DateTime           @default(now()) @db.Timestamp(0)
  intro String  @db.TinyText
  profile String  @db.Text

  post post[]

}

model post{
  id BigInt @id @default(autoincrement())
  authorId  BigInt     @db.UnsignedBigInt
  parentId  BigInt     @db.UnsignedBigInt
  title String @db.VarChar(50)
  metaTitle String @db.VarChar(50)
  slug String @db.VarChar(50)
  summary String @db.TinyText
  published String @db.TinyText()

  created_at   DateTime   @default(now()) @db.Timestamp(0)
  updated_at   DateTime   @default(now()) @db.Timestamp(0)
  publishedAt   DateTime   @default(now()) @db.Timestamp(0)
  content String @db.Text

  users users @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  post_comment post_comment[]
  post_tag post_tag[]
  post_meta post_meta[]
  post_category post_category[]

}


model post_comment{
  id BigInt @id @default(autoincrement())
  postId  BigInt     @db.UnsignedBigInt
  title String @db.VarChar(50) 
  published String @db.TinyText()
  created_at   DateTime   @default(now()) @db.Timestamp(0)
  publishedAt   DateTime   @default(now()) @db.Timestamp(0)
  content String @db.Text

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}


model tag{
  id BigInt @id @default(autoincrement())
  title String @db.VarChar(50)
  metaTitle String @db.VarChar(50)
  slug String @db.VarChar(50)
  content String @db.Text
  post_tag post_tag[]

}

model post_tag{
  id BigInt @id @default(autoincrement())
  postId  BigInt     @db.UnsignedBigInt
  tagId  BigInt     @db.UnsignedBigInt
  tag tag @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)

}

model post_meta{
  id BigInt @id @default(autoincrement())
  postId  BigInt     @db.UnsignedBigInt
  key String @db.VarChar(50)
  content String @db.Text

  post post @relation(fields: [postId], references: [id], onDelete:Restrict, onUpdate: Cascade)

}

model post_category{
  id BigInt @id @default(autoincrement())
  postId  BigInt     @db.UnsignedBigInt
  categoryId  BigInt     @db.UnsignedBigInt
  metaTitle String @db.VarChar(50)
  slug String @db.VarChar(50)
  content String @db.Text

  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  category category[]

}

model category{
  id BigInt @id @default(autoincrement())
  parentId  BigInt     @db.UnsignedBigInt
  title String @db.VarChar(50)
  metaTitle String @db.VarChar(100)
  slug String @db.VarChar(100)
  content String @db.Text
  post_category post_category @relation(fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)

}
  // users        users @relation(fields: [user_id],references: [id],onDelete: Restrict,onUpdate: Cascade)










